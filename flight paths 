#include <iostream>
using namespace std;

class Graph {
public:
    int adjMatrix[20][20];
    struct Node {
        int city;
        int cost;
        Node* next;
    };
    Node* adjList[20];
    int vertices, edges;
    
    Graph(int v, int e) {
        vertices = v;
        edges = e;
        for (int i = 0; i < v; i++) {
            for (int j = 0; j < v; j++) {
                adjMatrix[i][j] = 0;
            }
            adjList[i] = nullptr;
        }
    }
    
    void insertEdge(int u, int v, int cost) {
        adjMatrix[u][v] = cost;
        adjMatrix[v][u] = cost;
        Node* newNode = new Node{v, cost, adjList[u]};
        adjList[u] = newNode;
        newNode = new Node{u, cost, adjList[v]};
        adjList[v] = newNode; 
    }
    
    void displayMatrix() {
        cout << "Adjacency Matrix Representation:\n";
        for (int i = 0; i < vertices; i++) {
            for (int j = 0; j < vertices; j++) {
                cout << adjMatrix[i][j] << " ";
            }
            cout << endl;
        }
    }
    
    void displayList() {
        cout << "Adjacency List Representation:\n";
        for (int i = 0; i < vertices; i++) {
            cout << "City " << i << " -> ";
            Node* temp = adjList[i];
            while (temp!=nullptr) {
                cout << "(City " << temp->city << ", Cost: " << temp->cost << ") ";
                temp = temp->next;
            }
            cout << endl;
        }
    }
};

int main() {
    int n, e, u, v, cost, choice;
    cout << "Enter no. of cities (vertices): ";
    cin >> n;
    cout << "Enter no. of flight paths (edges): ";
    cin >> e;
    
    Graph g(n, e);
    
    for (int i = 0; i < e; i++) {
        cout << "Enter Flight connection (City A, City B, Cost): ";
        cin >> u >> v >> cost;
        g.insertEdge(u, v, cost);
    }
    
    while (true) {
        cout << "1. Input\n2. Display\nEnter your choice: ";
        cin >> choice;
        
        if (choice == 2) {
            cout << "1. Adjacency Matrix Representation\n2. Adjacency List Representation\nEnter choice: ";
            cin >> choice;
            
            if (choice == 1) {
                g.displayMatrix();
            } else if (choice == 2) {
                g.displayList();
            } else {
                cout << "Invalid choice!\n";
            }
        } else {
            break;
        }
    }
    
    return 0;
}
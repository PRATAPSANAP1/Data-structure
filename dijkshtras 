#include<iostream>
#include<climits>
#include<cstring>
using namespace std;
class graph {
public:
int g[20][20],dp[1<<16][20],n;
graph(int x) {
n=x;
for(int i=0;i<n;i++)
for(int j=0;j<n;j++)
cin>>g[i][j];
memset(dp,-1,sizeof(dp));
}
int tsp(int mask,int pos) {
if(mask==(1<<n)-1) return g[pos][0];
if(dp[mask][pos]!=-1) return dp[mask][pos];
int ans=INT_MAX;
for(int city=0;city<n;city++) {
if(!(mask&(1<<city)))
ans=min(ans,g[pos][city]+tsp(mask|(1<<city),city));
}
return dp[mask][pos]=ans;
}
void findminpath() {
cout<<tsp(1,0)<<endl;
}
};
int main() {
int n;
cin>>n;
graph g(n);
g.findminpath();
return 0;
}
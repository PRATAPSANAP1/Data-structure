#include<iostream>
using namespace std;
class Node
{
    public:
    int data;
    Node* left;
    Node* right;
    Node(int x)
    {
        data=x;
        left=nullptr;
        right=nullptr;
    }
};

class BinaryTree {
    Node *root;

    public:
    BinaryTree() {
        root = nullptr;
    }

    void insert(Node* &current, Node* temp)
    {
        char a;
        cout << "Which side(L/R):";
        cin >> a;

        if (a == 'l' || a == 'L')
        {
            if (current == nullptr)
            {
                current = temp;
            }
            else {
                insert(current->left, temp);
            }
        }
        else if (a == 'R' || a == 'r')
        {
            if (current == nullptr)
            {
                current = temp;
            }
            else {
                insert(current->right, temp);
            }
        }
    }

    void insertroot()
    {
        int data;
        cout << "Enter the number:";
        cin >> data;
        Node* temp = new Node(data);
        if (root == nullptr)
        {
            root = temp;
        }
        else
        {
            insert(root, temp);
        }
    }

    void preorder(Node* root)
    {
        if (root == nullptr)
        {
            return;
        }
        cout << root->data << " ";
        preorder(root->left);
        preorder(root->right);
    }

    void inorder(Node* root)
    {
        if (root == nullptr)
        {
            return;
        }
        inorder(root->left);
        cout << root->data << " ";
        inorder(root->right);
    }

    void postorder(Node* root)
    {
        if (root == nullptr)
        {
            return;
        }
        postorder(root->left);
        postorder(root->right);
        cout << root->data << " ";
    }

    int totalNode(Node* root)
    {
        if (root == nullptr)
        {
            return 0;
        }
        return 1 + totalNode(root->left) + totalNode(root->right);
    }

    void leafNode(Node* root)
    {
        if (root == nullptr)
        {
            return;
        }
        if (root->left == nullptr && root->right == nullptr)
        {
            cout << root->data << " ";
            return;
        }
        leafNode(root->left);
        leafNode(root->right);
    }

    int height(Node* root)
    {
        if (root == nullptr)
        {
            return 0;
        }
        return 1 + max(height(root->left), height(root->right));
    }

    void displayPreorder() { preorder(root); cout << endl; }
    void displayInorder() { inorder(root); cout << endl; }
    void displayPostorder() { postorder(root); cout << endl; }
    int countTotalNodes() { return totalNode(root); }
    void displayLeafNodes() { leafNode(root); cout << endl; }
    int getHeight() { return height(root); }
};

int main()
{
    BinaryTree tree;
    int ch, n;
    do
    {
        cout << "1.Insert\n2.Preorder\n3.Inorder\n4.Postorder\n5.Total Nodes\n6.Leaf Nodes\n7.Height\n\nEnter your choice:";
        cin >> ch;
        switch (ch)
        {
            case 1:
                cout << "How many nodes do you want to insert:";
                cin >> n;
                for (int i = 0; i < n; i++)
                {
                    tree.insertroot();
                }
                break;
            
            case 2:
                tree.displayPreorder();
                break;

            case 3:
                tree.displayInorder();
                break;

            case 4:
                tree.displayPostorder();
                break;

            case 5:
                cout << "Total Nodes: " << tree.countTotalNodes() << endl;
                break;

            case 6:
                cout << "Leaf Nodes: ";
                tree.displayLeafNodes();
                break;
            
            case 7:
                cout << "Height of Tree: " << tree.getHeight() << endl;
                break;

            default:
                cout << "Wrong choice!!";
                break;
        }
        cout << "Do you want to continue? [Press 1]:";
        cin >> ch;
    } while (ch == 1);
    
    return 0;
}

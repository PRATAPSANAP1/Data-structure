#include<iostream>
using namespace std;
class graph
{
public:
int g[100][100];
int dist[100];
int v,e;
int visited[100];
graph(int x,int y)
{
v=x;
e=v;
for(int i=0;i<v;i++)
{
for(int j=0;j<v;j++)
{
g[i][j]=0;
}
dist[i]=9999;
visited[i]=-1;
}
}

void insert(int x,int y,int wt)
{
g[x][y]=wt;
g[y][x]=wt;
}

void display()
{
for(int i=0;i<v;i++)
{
for(int j=0;j<v;j++)
{
cout<<g[i][j]<<" ";
}
cout<<endl;
}
}

void shortpath()
{
int i;
dist[0]=0;
visited[0]=1;
int current=0;
int count=0;
while(count<v-1)
{
for(i=0;i<v;i++)
{
if(g[current][i]!=0&&visited[i]==-1)
{
int temp=dist[current]+g[current][i];
if(dist[i]>temp)
{
dist[i]=temp;

}
}

}
int min1=9999;
for(i=0;i<v;i++)
{
if(visited[i]==-1&&min1>dist[i])
{

    min1=dist[i];
current=i;

}
}
visited[current]=1;
count++;
}
for(i=0;i<=v;i++)
{
cout<<dist[i]<<"-";
}
cout<<endl;
}

};

int main()
{
graph g(6,8);
g.insert(1,2,2);
g.insert(1,3,5);
g.insert(1,5,3);
g.insert(3,6,6);
g.insert(5,6,6);
g.insert(2,5,5);
g.insert(2,4,8);
g.insert(4,6,3);
g.display();
g.shortpath();

return 0;
}

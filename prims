#include<iostream>
#include<vector>
using namespace std;
class Graph
{
public:
vector<int> final1;
vector<int> start1;
vector<int> edge1;
int m[100][100];
int v,e,i,j,k;
int wt1=0;
Graph(int x,int y)
{
v=x;
e=y;
for(i=0;i<100;i++)
{
for(j=0;j<100;j++)
{
m[i][j]=0;
}
}
for(i=0;i<v;i++)
{
final1.push_back(-1);
start1.push_back(1);
}
}


void insert(int u,int v,int wt)
{
m[u][v]=wt;
m[v][u]=wt;
}


void display()
{
for(i=0;i<v;i++)
{
for(j=0;j<v;j++)
{
cout<<m[i][j]<<" ";
}
cout<<endl;
}
}

void prims()
{
final1[0]=1;
start1[0]=-1;
int count=v-1;
int parent=-1,child=-1;

for(i=0;i<count;i++)
{
int min1=9999;
for(j=0;j<v;j++)
{
if(final1[j]==1)
{
for(k=0;k<v;k++)
{
if(m[j][k]!=0 && min1>m[j][k] && final1[k]==-1)
{
min1=m[j][k];
parent=j;
child=k;


}}}}
wt1+=min1;
final1[parent]=1;
start1[child]=-1;
edge1.push_back(parent);
edge1.push_back(child);
edge1.push_back(min1);
m[parent][child]=0;
m[child][parent]=0;
}
cout<<"Weight of spannig tree is:-"<<wt1<<endl;
for(i=0;i<edge1.size();i+=3)
{
cout<<edge1[i]<<" "<<edge1[i+1]<<" "<<edge1[i+2]<<endl;
}
}
};
int main()
{
Graph g(5,6);
g.insert(0,1,2);
g.insert(0,2,4);
g.insert(2,3,1);
g.insert(1,3,2);
g.insert(1,4,3);
g.insert(3,4,4);
g.display();
g.prims();
return 0;
}

#include<iostream>
#include<vector>
#include<map>
using namespace std;
class Graph
{
public:
vector<int> final1;
vector<int> start1;
vector<int> edge1;
map<string,int> cityIndex;
vector<string> cityNames;
int m[100][100];
int v,e,i,j,k;
int wt1=0;
Graph(int x,int y){
v=x;
e=y;
for(i=0;i<100;i++){
for(j=0;j<100;j++){
m[i][j]=0;}}
for(i=0;i<v;i++){
final1.push_back(-1);
start1.push_back(1);}}
void insert(string u,string v,int wt){
if(cityIndex.find(u)==cityIndex.end()){
cityIndex[u]=cityNames.size();
cityNames.push_back(u);}
if(cityIndex.find(v)==cityIndex.end()){
cityIndex[v]=cityNames.size();
cityNames.push_back(v);}
m[cityIndex[u]][cityIndex[v]]=wt;
m[cityIndex[v]][cityIndex[u]]=wt;}
void display(){
cout<<"Adjacency matrix representation!!!"<<endl;
for(i=0;i<v;i++){
for(j=0;j<v;j++){
cout<<m[i][j]<<" ";}
cout<<endl;}}
void prims(){
final1[0]=1;
start1[0]=-1;
int count=v-1;
int parent=-1,child=-1;
for(i=0;i<count;i++){
int min1=9999;
for(j=0;j<v;j++){
if(final1[j]==1){
for(k=0;k<v;k++){
if(m[j][k]!=0&&min1>m[j][k]&&final1[k]==-1){
min1=m[j][k];
parent=j;
child=k;}}}}}
wt1+=min1;
final1[parent]=1;
final1[child]=1;
edge1.push_back(parent);
edge1.push_back(child);
edge1.push_back(min1);
m[parent][child]=0;
m[child][parent]=0;}
cout<<"Weight of spanning tree is:-"<<wt1<<endl;
for(i=0;i<edge1.size();i+=3){
cout<<cityNames[edge1[i]]<<" "<<cityNames[edge1[i+1]]<<" "<<edge1[i+2]<<endl;}}
};
int main(){
int v,e,i,dist;
string ca,cb;
cout<<"Enter the number of interview locations: ";
cin>>v;
cout<<"Enter the number of paths between locations: ";
cin>>e;
Graph g(v,e);
cout<<"Enter the locations and distance (CityA CityB Distance):"<<endl;
for(i=0;i<e;i++){
cin>>ca>>cb>>dist;
g.insert(ca,cb,dist);}
g.display();
g.prims();
return 0;}

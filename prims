#include <iostream>
#include <map>
#include <vector>
using namespace std;
class graph
{
    public:
    int v,e,i,j,k;
    map<string, int>cityindex;
    vector<string>cityname;
    vector<int> final1;
    vector<int>start1;
    vector<int>edge1;
    int wt=0;
    int m[100][100];
    graph(int x,int y)
    {
        v=x;
        e=y;
        for(i=0;i<100;i++)
        {
            for(j=0;j<100;j++)
            {
                m[i][j]=0;
            }
        }
        for(i=0;i<v;i++)
        {
            final1.push_back(-1);
            start1.push_back(1);
        }
    }

    void insert(string u,string v,int data)
    {
        if(cityindex.find(u)==cityindex.end())
        {
            cityindex[u]=cityname.size();
            cityname.push_back(u);
        }
        if(cityindex.find(v)==cityindex.end())
        {
            cityindex[v]=cityname.size();
            cityname.push_back(v);
        }
        m[cityindex[u]][cityindex[v]]=data;
        m[cityindex[v]][cityindex[u]]=data;
    }


void display()
{
    for(i=0;i<v;i++)
    {
        for(j=0;j<v;j++)
        {
            cout<<m[i][j]<<" ";
        }
        cout<<endl;
    }
}

void prims()
{
    final1[0]=1;
    int parent=-1,child=-1;
    int count=v-1;
    for(i=0;i<count;i++)
    {
        int min=9999;
        for(j=0;j<v;j++)
        {
            if(final1[j]==1)
            {
                for(k=0;k<v;k++)
                {
                    if(m[j][k]!=0&&min>m[j][k]&&final1[k]==-1)
                    {
                        min=m[j][k];
                        parent=j;
                        child=k;
                    }
                }
            }
        }
        if(min==9999) continue;
        wt+=min;
        final1[child]=1;
        edge1.push_back(parent);
        edge1.push_back(child);
        edge1.push_back(min);
    
    }
    cout<<"Weight of Spanning tree is:"<<wt<<endl;
    for(i=0;i<edge1.size();i+=3)
    {
        cout<<cityname[edge1[i]]<<" "<<cityname[edge1[i+1]]<<" "<<edge1[i+2]<<endl;
    }
}
};

int main()
{
    int v,e,i,w;
    string ca,cb;
    cout<<"How much interview location you want to visit:";
    cin>>v;
    cout<<"enter the number of path for locations:";
    cin>>e;
    graph g(v,e);
    for(i=0;i<e;i++)
    {
        cout<<"Enter the locations and distance (citya,cityb,distance)";
        cin>>ca>>cb>>w;
        g.insert(ca,cb,w);
    }
    g.display();
    g.prims();
    return 0;
}

#include<iostream>
#include<map>
using namespace std;
struct Node
{
    string city;
    int cost;
    Node* next;
    Node(string x,int y)
    {
        city=x;
        cost=y;
        next=nullptr;
    }
};
class graph
{
    public:
    map<string,Node*>AdjList;
    void insert(string citya,string cityb,int cost)
    {
        Node* newNode1=new Node(citya,cost);
        newNode1->next=AdjList[cityb];
        AdjList[cityb]=newNode1->next;

        Node* newNode2=new Node(cityb,cost);
        newNode2->next=AdjList[citya];
        AdjList[citya]=newNode2->next;
    }

    void display()
    {
        for(auto city:AdjList)
        {
            cout<<"vertex: "<<city.first<<"->";
            Node* temp1=city.second;
            while(temp1!=nullptr)
            {
                cout<<temp1->city<<","<<temp1->cost<<"->";
                temp1=temp1->next;
            }
             cout<<"Null\n";
        }
       
    }

    ~graph()
    {
        for(auto city:AdjList)
        {
            Node* temp=city.second;
            while(temp!=NULL)
            {
            Node* Todelete=temp;
            temp=temp->next;
            delete Todelete;
            }
        }
    }
    
};
int main()
{
    graph g;
    int a;
    string citya,cityb;
    int cost;
    cout<<"Enter the number of flight:";
    cin>>a;
    cout<<"Enter the flight schedule(city A,city B,cost):\n";
    for(int i=0;i<a;i++)
    { cout<<i+1<<"]";
        cin>>citya>>cityb>>cost;
        g.insert(citya,cityb,cost);
    }
    cout<<"Representation of Adjacent List:\n";
    g.display();
    return 0;
}

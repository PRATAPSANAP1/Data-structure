#include<iostream>
using namespace std;
class Hashtable
{
public:
string name;
string id;
string history;
string treatment;
Hashtable()
{
name="empty";
id="empty";
history="empty";
treatment="empty";
}
};

void insert(Hashtable h[],string name,string id,string history,string treatment,int array[],int n)
{
int val=0;
for(char c:id)
{
val+=(int)c;
}
val=val%n;
int i=0,j=1,k=0;
if(array[val]==-1||array[val]==-2)
{
h[val].name=name;
h[val].id=id;
h[val].history=history;
h[val].treatment=treatment;
array[val]=0;
cout<<"inserted at:"<<val<<endl;
}
else
{
while(i!=1)
{
cout<<"collision occur at:"<<val<<endl;
k++;
val=(val+(k*k))%n;
j++;
if(array[val]==-1||array[val]==-2)
{

h[val].name=name;
h[val].id=id;
h[val].history=history;
h[val].treatment=treatment;
array[val]=0;
cout<<"inserted at:"<<val<<endl;
i=1;
}
if(j==n)
{
cout<<"Hashtable table is full!!!";
i=1;
}
}
}
}

void display(Hashtable h[],int array[],int n)
{
for(int i=0;i<n;i++)
{
if(array[i]==0)
{
cout<<"Name: "<<h[i].name<<endl;
cout<<"id: "<<h[i].id<<endl;
cout<<"history: "<<h[i].history<<endl;
cout<<"treatment: "<<h[i].treatment<<endl;
}
}
}

void update(Hashtable h[],int array[],int n,string id)
{
int val=0;
int i=0,j=1,k=0;
for(char c:id)
{
val+=(int)c;
}
val=val%n;
if(h[val].id==id&&array[val]==0)
{
string name1,history1,treatment1,id1;
cout<<"Enter the new patient id: ";
cin>>id1;
cout<<"Enter the new patient name: ";
cin>>name1;
cout<<"Enter the new patient history: ";
cin>>history1;
cout<<"Enter the new patient treatment: ";
cin>>treatment1;
h[val].name=name1;
h[val].id=id1;
h[val].history=history1;
h[val].treatment=treatment1;
return;
}
while(i!=1)
{
k++;
val=(val+(k*k))%n;
j++;
if(h[val].id==id&&array[val]==0)
{
string name1,history1,id1,treatment1;
cout<<"Enter the new patient id: ";
cin>>id1;
cout<<"Enter the new patient name: ";
cin>>name1;
cout<<"Enter the new patient history: ";
cin>>history1;
cout<<"Enter the new patient treatment: ";
cin>>treatment1;
h[val].name=name1;
h[val].id=id1;
h[val].history=history1;
h[val].treatment=treatment1;
i=1;
}
if (j==n) {
cout << "Track not found" << endl;
i = 1;
}
}
}

void search(Hashtable h[],int array[],int n,string id)
{
int val=0;
int i=0,j=1,k=0;
for(char c:id)
{
val+=(int)c;
}
val=val%n;
if(h[val].id==id&&array[val]==0)
{
cout<<"Name: "<<h[val].name<<endl;
cout<<"id: "<<h[val].id<<endl;
cout<<"history: "<<h[val].history<<endl;
cout<<"treatment: "<<h[i].treatment<<endl;
return;
}
while(i!=1)
{ k++;
val=(val+(k*k))%n;
j++;
if(h[val].id==id&&array[val]==0)
{
cout<<"Name: "<<h[val].name<<endl;
cout<<"id: "<<h[val].id<<endl;
cout<<"history: "<<h[val].history<<endl;
cout<<"treatment: "<<h[i].treatment<<endl;
i=1;
}
if(j==n)
{
cout<<"Record is not found!!";
i=1;
}
}
}

void deleterecord(Hashtable h[],int array[],int n,string id)
{
int val=0;
int i=0,j=1,k=0;
for(char c:id)
{
val+=(int)c;
}
val=val%n;
if(h[val].id==id&&array[val]==0)
{
array[val]=-2;
cout<<"Record deleted!!!";
return;
}
while(i!=1)
{
val=(val+(k*k))%n;
j++;
if(h[val].id==id&&array[val]==0)
{
array[val]=-2;
cout<<"Record deleted!!!";
i=1;
}
if (j==n) {
cout << "Track not found" << endl;
i = 1;
}
}

}

void displaybyhistory(Hashtable h[],int array[],int n,string history1)
{ int flag=0;
for(int i=0;i<n;i++)
{
if(array[i]==0&&h[i].history==history1)
{
cout<<"Name: "<<h[i].name<<endl;
cout<<"id: "<<h[i].id<<endl;
cout<<"history: "<<h[i].history<<endl;
cout<<"treatment: "<<h[i].treatment<<endl;
flag=1;
}
}
if(flag==0)
{
cout<<history1<<" is not present in record!!!";
}
}

int main()
{
int n;
cout<<"Enter number of patient track you want to insert(Hashtable size): ";
cin>>n;
Hashtable h[n];
int array[n];
for(int i=0;i<n;i++)
{
array[i]=-1;
}
int ch;
string name,history,id,id1,history1,treatment,treatment1;
do
{
cout<<"1.Insert\n2.search\n3.update\n4.delete\n5.display\n6.display by history\n7.Exit\nEnter your choice: ";
cin>>ch;

switch(ch)
{

case 1:
cout<<"Enter the patient id: ";
cin>>id;
cout<<"Enter the patient name: ";
cin>>name;
cout<<"Enter the patient history: ";
cin>>history;
cout<<"Enter the patient treatment: ";
cin>>treatment;
insert(h,name,id,history,treatment,array,n);
break;

case 2:
cout<<"Enter the id which you want search: ";
cin>>id1;
search(h,array,n,id1);
break;

case 3:
cout<<"Enter the id which you want update: ";
cin>>id1;
update(h,array,n,id1);
break;

case 4:
cout<<"Enter the id which you want delete: ";
cin>>id1;
deleterecord(h,array,n,id1);
break;

case 5:
display(h,array,n);
break;

case 6:
cout<<"Enter the history which you want display: ";
cin>>history1;
displaybyhistory(h,array,n,history1);
break;

case 7:
cout<<"Exiting!!";
break;

default:
cout<<"Wrong choice! try again!!!";

}

}
while(ch!=7);
return 0;

}
